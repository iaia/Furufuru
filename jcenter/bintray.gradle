apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

if (project.hasProperty("android")) {
    task sourceJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        archiveClassifier.set("sources")
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${pj.artifactId}-${pj.versions.name}.aar"
        }
    }
}

bintray {
    def keys = new Properties()
    file("../keys.properties").withInputStream {
        stream -> keys.load(stream)
    }
    user = keys.bintray_user
    key = keys.bintray_key
    publications = ["bintray"]

    pkg {
        repo = "maven"
        name = POM_BINTRAY_NAME
        licenses = ["MIT"]
        websiteUrl = pj.siteUrl
        issueTrackerUrl = pj.githubUrl + "/blob/master/LICENSE"
        vcsUrl = pj.githubUrl + ".git"
        issueTrackerUrl = pj.githubUrl + "/issues"
        publicDownloadNumbers = true
        version {
            name = pj.versions.name
        }
    }
}

bintrayUpload.dependsOn assemble

publishing {
    publications {
        bintray(MavenPublication) {
            artifact "${buildDir}/outputs/aar/${pj.artifactId}-${pj.versions.name}.aar"
            groupId = pj.groupId
            artifactId = pj.artifactId
            version = pj.versions.name

            artifact sourceJar

            pom.withXml {
                def node = asNode()

                def licenses = node.appendNode("licenses")
                appendLicense(licenses, "The MIT License", "https://opensource.org/licenses/MIT", "repo")

                appendScm(node, pj.scmConnection, pj.githubUrl)

                def dependencies = node.appendNode("dependencies")
                configurations.api.dependencies.each {
                    appendDependency(dependencies, it.group, it.name, it.version, "compile")
                }
                configurations.implementation.dependencies.each {
                    appendDependency(dependencies, it.group, it.name, it.version, "runtime")
                }
            }
        }
    }
}

static def appendLicense(parentNode, name, url, distribution) {
    def node = parentNode.appendNode("license")
    node.appendNode("name", name)
    node.appendNode("url", url)
    node.appendNode("distribution", distribution)
}

static def appendScm(parentNode, connection, url) {
    def node = parentNode.appendNode("scm")
    node.appendNode("connection", connection)
    node.appendNode("url", url)
}

static def appendDependency(parentNode, groupId, artifactId, version, scope) {
    def node = parentNode.appendNode("dependency")
    node.appendNode("groupId", groupId)
    node.appendNode("artifactId", artifactId)
    node.appendNode("version", version)
    node.appendNode("scope", scope)
}
