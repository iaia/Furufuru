plugins {
    id("com.android.library")
    id("kotlin-android")
    id("kotlin-kapt")
    alias(libs.plugins.kotlin.serialzation.plugin)
    alias(libs.plugins.compose.plugin)
    id("de.mannodermaus.android-junit5")
    id("maven-publish")
    id("signing")
}

def FURUFURU_VERSION_NAME = '0.14.0'
def FURUFURU_VERSION_CODE = 140

group = "dev.iaiabot.furufuru"
archivesBaseName = "furufuru"
version = FURUFURU_VERSION_NAME

android {
    compileSdk 36
    namespace 'dev.iaiabot.furufuru'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 36

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        buildConfigField("long", "VERSION_CODE", "${FURUFURU_VERSION_CODE}")
        buildConfigField("String", "VERSION_NAME", "\"${FURUFURU_VERSION_NAME}\"")
    }

    buildTypes {
        debug {
            buildConfigField("String", "GITHUB_API_URL", "\"https://api.github.com\"")
        }

        release {
            buildConfigField("String", "GITHUB_API_URL", "\"https://api.github.com\"")
        }
    }

    buildFeatures {
        buildConfig true
        compose true
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    // Add Kotlin source directory to all source sets
    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
        }
        unitTests.all {
            testLogging.events = ["passed", "skipped", "failed"]
        }
    }
}

dependencies {
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.ktx)

    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.lifecycle.livedata.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.kotlinx.coroutines)
    implementation(libs.kotlin.stdlib.jdk8)
    implementation(libs.android.material)

    // koin
    implementation(libs.koin.android)
    implementation(libs.koin.android.compat)
    implementation(libs.koin.androidx.workmanager)
    implementation(libs.koin.androidx.compose)

    // permission dispatcher
    implementation(libs.permissions.dispatcher)
    kapt(libs.permissions.dispatcher.processor)

    // kotlin-serialization
    implementation(libs.kotlin.stdlib)
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.kotlinx.serialization.properties)
    implementation(libs.retrofit2.kotlinx.serialization.converter)

    // retrofit
    implementation(libs.retrofit)
    // implementation("com.squareup.retrofit2:retrofit-mock:$retrofit_version")

    // retrofitが以下の問題のあるlibに依存しているため
    // om.squareup.okhttp3/okhttp@3.14.9
    // com.squareup.okio/okio@3.2.0
    implementation(libs.okio)
    implementation(libs.okhttp)

    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    // Tooling support (Previews, etc.)
    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.ui.tooling)
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation(libs.androidx.foundation)
    // Material Design
    implementation(libs.androidx.material)
    // Material design icons
    implementation(libs.androidx.material.icons.core)
    implementation(libs.androidx.material.icons.extended)
    // Integration with observables
    implementation(libs.androidx.runtime.livedata)
    implementation(libs.androidx.runtime.rxjava2)

    testImplementation(platform(libs.junit.bom))
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly(libs.junit.platform.launcher) {
        because("Only needed to run tests in a version of IntelliJ IDEA that bundles older versions")
    }
    testRuntimeOnly(libs.junit.jupiter.engine)
    testRuntimeOnly(libs.junit.vintage.engine)
    testImplementation(libs.kotlinx.coroutines.test)

    testImplementation(libs.core.testing)

    // mockk
    testImplementation(libs.mockk)
    testImplementation(libs.mockk.agent.jvm)

    // spek
    testImplementation(libs.spek.dsl.jvm)
    testImplementation(libs.spek.runner.junit5)

    // spek requires kotlin-reflect, omit when already in classpath
    testImplementation(libs.kotlin.reflect)

    // kotest
    testImplementation(libs.kotest.runner.junit5)

    // truth
    testImplementation(libs.truth)

    androidTestImplementation(libs.androidx.ui.test.junit4)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
}

tasks.register('sourceJar', Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("source")
}
tasks.register('javadoc', Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../javadoc/")
    failOnError false
}
tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from tasks.javadoc.destinationDir
}
tasks.register('androidSourcesJar', Jar) {
    dependsOn generateMetadataFileForReleasePublication
    dependsOn javadocJar
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                    password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
                }
            }
        }

        publications {
            release(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up later
                groupId 'dev.iaiabot.furufuru'
                artifactId 'furufuru'
                version FURUFURU_VERSION_NAME

                from components.release

                // artifact androidSourcesJar
                // artifact javadocJar

                // Mostly self-explanatory metadata
                pom {
                    name = 'furufuru'
                    description = 'Make an issue on github easily just by shaking.'
                    url = 'https://github.com/iaia/furufuru'

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id = 'iaia'
                            name = 'iaia'
                            email = 'iaia72160@gmail.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com/iaia/Furufuru.git'
                        developerConnection = 'scm:git:ssh://github.com/iaia/Furufuru.git'
                        url = 'https://github.com/iaia/Furufuru'
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}
