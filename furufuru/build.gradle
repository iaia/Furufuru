plugins {
    id("com.android.library")
    id("kotlin-android")
    id("kotlin-android-extensions")
    id("kotlin-kapt")
    id("maven-publish")
    id("com.jfrog.bintray")
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

android.libraryVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "${pj.artifactId}-${pj.versions.name}.aar"
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

def versionMajor = 0
def versionMinor = 0
def versionPatch = 3

ext {
    pj = [
            versions : [
                    name: "${versionMajor}.${versionMinor}.${versionPatch}",
                    code: versionMajor * 10000 + versionMinor * 100 + versionPatch
            ],
            artifactId   : "Furufuru",
            groupId      : "dev.iaiabot",
            siteUrl      : "https://github.com/iaia/Furufuru",
            githubUrl    : "https://github.com/iaia/Furufuru",
            scmConnection: "scm:git:https://github.com/iaia/Furufuru.git"
    ]
}

bintray {
    def keys = new Properties()
    file("../keys.properties").withInputStream {
        stream -> keys.load(stream)
    }
    user = keys.bintray_user
    key = keys.bintray_key
    publications = ["bintray"]

    pkg {
        repo = "maven"
        name = pj.groupId + "." + pj.artifactId
        licenses = ["MIT"]
        websiteUrl = pj.siteUrl
        issueTrackerUrl = pj.githubUrl + "/blob/master/LICENSE"
        vcsUrl = pj.githubUrl + ".git"
        issueTrackerUrl = pj.githubUrl + "/issues"
        publicDownloadNumbers = true
        version {
            name = pj.versions.name
        }
    }
}

bintrayUpload.dependsOn assemble

publishing {
    publications {
        bintray(MavenPublication) {
            artifact "${rootDir}/furufuru/build/outputs/aar/${pj.artifactId}-${pj.versions.name}.aar"
            groupId = pj.groupId
            artifactId = "Furufuru"
            version = pj.versions.name

            artifact sourceJar

            pom.withXml {
                def node = asNode()

                def licenses = node.appendNode("licenses")
                appendLicense(licenses, "The MIT License", "https://opensource.org/licenses/MIT", "repo")

                appendScm(node, pj.scmConnection, pj.githubUrl)

                def dependencies = node.appendNode("dependencies")
                configurations.api.dependencies.each {
                    appendDependency(dependencies, it.group, it.name, it.version, "compile")
                }
                configurations.implementation.dependencies.each {
                    appendDependency(dependencies, it.group, it.name, it.version, "runtime")
                }
            }
        }
    }
}

static def appendLicense(parentNode, name, url, distribution) {
    def node = parentNode.appendNode("license")
    node.appendNode("name", name)
    node.appendNode("url", url)
    node.appendNode("distribution", distribution)
}

static def appendScm(parentNode, connection, url) {
    def node = parentNode.appendNode("scm")
    node.appendNode("connection", connection)
    node.appendNode("url", url)
}

static def appendDependency(parentNode, groupId, artifactId, version, scope) {
    def node = parentNode.appendNode("dependency")
    node.appendNode("groupId", groupId)
    node.appendNode("artifactId", artifactId)
    node.appendNode("version", version)
    node.appendNode("scope", scope)
}

dependencies {
    implementation(project(":data"))

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // koin
    ext.koin_version = '2.1.4'
    implementation("org.koin:koin-androidx-scope:$koin_version")
    implementation("org.koin:koin-androidx-viewmodel:$koin_version")
    implementation("org.koin:koin-androidx-ext:$koin_version")

    // permission dispatcher
    ext.permission_dispatcher_version = '4.7.0'
    implementation("org.permissionsdispatcher:permissionsdispatcher:$permission_dispatcher_version")
    kapt("org.permissionsdispatcher:permissionsdispatcher-processor:$permission_dispatcher_version")

    // ViewModel
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    implementation 'com.google.android.material:material:1.1.0'
}
