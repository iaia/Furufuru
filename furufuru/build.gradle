plugins {
    id("com.android.library")
    id("kotlin-android")
    id("kotlin-kapt")
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.0'
    id("de.mannodermaus.android-junit5")
    id("maven-publish")
    id("signing")
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        // TODO: 何故か自動生成されない
        buildConfigField("String", "VERSION_CODE", "\"$versionCode\"")
        buildConfigField("String", "VERSION_NAME", "\"$versionName\"")
    }

    buildTypes {
        debug {
            buildConfigField("String", "GITHUB_API_URL", "\"https://api.github.com\"")
        }

        release {
            buildConfigField("String", "GITHUB_API_URL", "\"https://api.github.com\"")
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
        buildConfig true
        compose true
    }

    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    composeOptions {
        kotlinCompilerVersion '1.5.21'
        kotlinCompilerExtensionVersion '1.0.2'
    }

    // Add Kotlin source directory to all source sets
    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    testOptions {
        junitPlatform {
            filters {
                engines {
                    include 'spek2'
                }
            }
        }
        unitTests.all {
            testLogging.events = ["passed", "skipped", "failed"]
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.0"
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // koin
    ext.koin_version = '3.1.1'
    // Koin main features for Android (Scope,ViewModel ...)
    implementation "io.insert-koin:koin-android:$koin_version"
// Koin Java Compatibility
    implementation "io.insert-koin:koin-android-compat:$koin_version"
// Koin for Jetpack WorkManager
    implementation "io.insert-koin:koin-androidx-workmanager:$koin_version"
// Koin for Jetpack Compose
    implementation "io.insert-koin:koin-androidx-compose:$koin_version"

    // permission dispatcher
    ext.permission_dispatcher_version = '4.8.0'
    implementation "com.github.permissions-dispatcher:permissionsdispatcher:${permission_dispatcher_version}"
    kapt "com.github.permissions-dispatcher:permissionsdispatcher-processor:${permission_dispatcher_version}"

    // ViewModel
    def lifecycle_version = "2.3.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    implementation 'com.google.android.material:material:1.4.0'

    // kotlin-serialization
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.1"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-properties:1.0.1"
    implementation("com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.6.0")

    // retrofit
    ext.retrofit_version = '2.9.0'
    implementation("com.squareup.retrofit2:retrofit:$retrofit_version")
    // implementation("com.squareup.retrofit2:retrofit-mock:$retrofit_version")

    // mockk
    testImplementation "io.mockk:mockk:1.11.0"

    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // spek
    ext.spek = "2.0.15"
    testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spek"
    testImplementation "org.spekframework.spek2:spek-runner-junit5:$spek"

    // spek requires kotlin-reflect, omit when already in classpath
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testImplementation "android.arch.core:core-testing:1.1.1"

    // truth
    testImplementation "com.google.truth:truth:1.1"

    ext.compose = "1.0.2"
    implementation "androidx.compose.ui:ui:$compose"
    // Tooling support (Previews, etc.)
    implementation "androidx.activity:activity-compose:1.3.1"
    implementation "androidx.compose.ui:ui-tooling:$compose"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:$compose"
    // Material Design
    implementation "androidx.compose.material:material:$compose"
    // Material design icons
    implementation "androidx.compose.material:material-icons-core:$compose"
    implementation "androidx.compose.material:material-icons-extended:$compose"
    // Integration with observables
    implementation "androidx.compose.runtime:runtime-livedata:$compose"
    implementation "androidx.compose.runtime:runtime-rxjava2:$compose"

    // UI Tests
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose"
}

group = "dev.iaiabot.furufuru"
archivesBaseName = "furufuru"
version = '0.8.3'

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../javadoc/")
    failOnError false
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from tasks.javadoc.destinationDir
}
task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }

        publications {
            release(MavenPublication) {
                // The coordinates of the library, being set from variables that
                // we'll set up later
                groupId 'dev.iaiabot.furufuru'
                artifactId 'furufuru'
                version '0.8.3'

                from components.release

                artifact androidSourcesJar
                artifact javadocJar

                // Mostly self-explanatory metadata
                pom {
                    name = 'furufuru'
                    description = 'Make an issue on github easily just by shaking.'
                    url = 'https://github.com/iaia/furufuru'

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id = 'iaia'
                            name = 'iaia'
                            email = 'iaia72160@gmail.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:github.com/iaia/Furufuru.git'
                        developerConnection = 'scm:git:ssh://github.com/iaia/Furufuru.git'
                        url = 'https://github.com/iaia/Furufuru'
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}
